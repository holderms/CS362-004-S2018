!+++++++++++++++  Unit Test 3  +++++++++++++++_!
----------------------
Unit Test 3.1 --- adventurer playCard
Coins updated, change is 2? == 2
Fail: No actions remaining but still in action phase
----------------------
Unit Test 3.2 --- treasure_map playCard
Unit test 3.2 failed --- invalid card
----------------------
Unit Test 3.3 --- gold playCard
OK Unit test 3.3 failed --- invalid card
----------------------
Unit Test 3.4 --- invalid playCard
OK Unit test 3.4 failed --- invalid card
----------------------
Unit Test 3.5 --- steward playCard
Test 3.5 Fail: G.numActions is 2
----------------------
Unit Test 3.6 --- bad phase 
OK - Unit test 3.6 failed --- invalid phase
----------------------
Unit Test 3.7 --- bad num actions 
OK - Unit test 3.7 failed --- invalid actions
!+++++++++++++++++++++++++++++++++!
File 'dominion.c'
Lines executed:44.52% of 557
Branches executed:42.45% of 417
Taken at least once:32.37% of 417
Calls executed:32.98% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 659 returned 100% blocks executed 100%
      659:    8:int compare(const void* a, const void* b) {
      659:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       94:   10:    return 1;
      565:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
      126:   12:    return -1;
      439:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 2 returned 100% blocks executed 100%
        2:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        2:   23:  int* k = malloc(10 * sizeof(int));
        2:   24:  k[0] = k1;
        2:   25:  k[1] = k2;
        2:   26:  k[2] = k3;
        2:   27:  k[3] = k4;
        2:   28:  k[4] = k5;
        2:   29:  k[5] = k6;
        2:   30:  k[6] = k7;
        2:   31:  k[7] = k8;
        2:   32:  k[8] = k9;
        2:   33:  k[9] = k10;
        2:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       90:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       31:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
       22:  140:      state->deckCount[i] = 0;
       88:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       66:  143:	  state->deck[i][j] = estate;
       66:  144:	  state->deckCount[i]++;
        -:  145:	}
      176:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      154:  148:	  state->deck[i][j] = copper;
      154:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       31:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
       22:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       31:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       22:  166:      state->handCount[i] = 0;
       22:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 60 returned 100% blocks executed 100%
       60:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       60:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       60:  209:  if (state->deckCount[player] < 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       15:  210:    return -1;
       45:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      497:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      407:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      407:  216:    newDeck[newDeckPos] = state->deck[player][card];
      407:  217:    newDeckPos++;
     1325:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      918:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      407:  221:    state->deckCount[player]--;
        -:  222:  }
      452:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      407:  224:    state->deck[player][i] = newDeck[i];
      407:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       45:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 7 returned 100% blocks executed 100%
        7:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
        7:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        7:  237:  if (state->phase != 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
        5:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //check if selected card is an action
        5:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
        3:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  259:    {
        1:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        2:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 5 returned 100% blocks executed 100%
        5:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
       24:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 108 returned 100% blocks executed 100%
      108:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      108:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       24:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
       12:  534:      state->deck[player][i] = state->discard[player][i];
       12:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       12:  538:    state->deckCount[player] = state->discardCount[player];
       12:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       12:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       12:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       12:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       12:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       12:  559:    if (deckCounter == 0)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        9:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       96:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       96:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       96:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       96:  576:    state->deckCount[player]--;
       96:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       99:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://smithy function to introduce a bug
function smithyfun called 1 returned 100% blocks executed 100%
        1:  647:int smithyfun(int currentPlayer, struct gameState *state, int handPos){
        -:  648:  //+3 Cards
        -:  649:  int i;
        5:  650:  for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  651:  {
        4:  652:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  653:  }
        -:  654:
        -:  655:      //discard card from hand
        1:  656:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  657:      return 0;
        -:  658:}
        -:  659:
        -:  660://adventurer function to introduce a bug
function adventurerfun called 4 returned 100% blocks executed 100%
        4:  661:int adventurerfun(int currentPlayer, struct gameState *state){
        -:  662:    int cardDrawn;
        -:  663:    int temphand[MAX_HAND];
        4:  664:    int drawntreasure = 0;
        4:  665:    int z = 0;
        -:  666:
       32:  667:  while(drawntreasure <= 2){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       24:  668:      if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        6:  669:          shuffle(currentPlayer, state);
call    0 returned 100%
        -:  670:      }
       24:  671:  drawCard(currentPlayer, state);
call    0 returned 100%
       24:  672:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       24:  673:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 33% (fallthrough)
branch  5 taken 67%
       12:  674:  drawntreasure++;
        -:  675:  else{
       12:  676:  temphand[z]=cardDrawn;
       12:  677:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       12:  678:  z++;
        -:  679:  }
        -:  680:}
        -:  681:
       20:  682:    while(z-1>=0){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       12:  683:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       12:  684:      z=z-1;
        -:  685:    }
        4:  686:    return 0;
        -:  687:}
        -:  688:
function villagefun called 1 returned 100% blocks executed 100%
        1:  689:int villagefun(int handPos, int currentPlayer, struct gameState *state){
        -:  690:        //+1 Card
        1:  691:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  692:
        -:  693:        //+2 Actions
        1:  694:        state->numActions = state->numActions + 2;
        -:  695:
        -:  696:        //discard played card from hand
        -:  697:        //discardCard(handPos, currentPlayer, state, 0);
        1:  698:        return 0;
        -:  699:}
        -:  700:
function great_hallfun called 0 returned 0% blocks executed 0%
    #####:  701:int great_hallfun(int currentPlayer, struct gameState *state, int handPos){
        -:  702:        //+1 Card
    #####:  703:        drawCard(currentPlayer, state);
call    0 never executed
        -:  704:
        -:  705:        //+1 Actions
    #####:  706:        state->numActions++;
        -:  707:
        -:  708:        //discard card from hand
    #####:  709:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  710:        return 0;
        -:  711:}
        -:  712:
function stewardfun called 1 returned 100% blocks executed 70%
        1:  713:int stewardfun(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state){
        -:  714:
        1:  715:  if (choice1 == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  716:	{
        -:  717:	  //+2 cards
    #####:  718:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  719:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  720:	}
        1:  721:      else if (choice2 == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  722:	{
        -:  723:	  //+2 coins
    #####:  724:	  state->coins = state->coins + 2;
        -:  725:	}
        -:  726:      else
        -:  727:	{
        -:  728:	  //trash 2 cards in hand
        1:  729:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        1:  730:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:  731:	}
        -:  732:
        -:  733:      //discard card from hand
        1:  734:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  735:      return 0;
        -:  736:}
        -:  737:
function cardEffect called 11 returned 100% blocks executed 27%
       11:  738:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  739:{
        -:  740:  int i;
        -:  741:  int j;
        -:  742:  int k;
        -:  743:  int x;
        -:  744:  int index;
       11:  745:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       11:  746:  int nextPlayer = currentPlayer + 1;
        -:  747:
       11:  748:  int tributeRevealedCards[2] = {-1, -1};
        -:  749:  int temphand[MAX_HAND];// moved above the if statement
       11:  750:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  751:    nextPlayer = 0;
        -:  752:  }
        -:  753:
        -:  754:
        -:  755:  //uses switch to select card and perform actions
       11:  756:  switch( card )
branch  0 taken 36%
branch  1 taken 18%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 9%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 9%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 18%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 9%
branch 20 taken 0%
        -:  757:    {
        -:  758:    case adventurer:
        4:  759:      adventurerfun(currentPlayer, state);
call    0 returned 100%
        -:  760:
        -:  761:    case council_room:
        -:  762:      //+4 Cards
       30:  763:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  764:	{
       24:  765:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  766:	}
        -:  767:
        -:  768:      //+1 Buy
        6:  769:      state->numBuys++;
        -:  770:
        -:  771:      //Each other player draws a card
       20:  772:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  773:	{
       14:  774:	  if ( i != currentPlayer )
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -:  775:	    {
        8:  776:	      drawCard(i, state);
call    0 returned 100%
        -:  777:	    }
        -:  778:	}
        -:  779:
        -:  780:      //put played card in played card pile
        6:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  782:
        6:  783:      return 0;
        -:  784:
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:
    #####:  836:      return 0;
        -:  837:
        -:  838:    case gardens:
    #####:  839:      return -1;
        -:  840:
        -:  841:    case mine:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  855:	{
    #####:  856:	  return -1;
        -:  857:	}
        -:  858:
    #####:  859:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  860:
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  863:
        -:  864:      //discard trashed card
    #####:  865:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  866:	{
    #####:  867:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  868:	    {
    #####:  869:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  870:	      break;
        -:  871:	    }
        -:  872:	}
        -:  873:
    #####:  874:      return 0;
        -:  875:
        -:  876:    case remodel:
    #####:  877:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  878:
    #####:  879:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  880:	{
    #####:  881:	  return -1;
        -:  882:	}
        -:  883:
    #####:  884:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  885:
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  888:
        -:  889:      //discard trashed card
    #####:  890:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  891:	{
    #####:  892:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  893:	    {
    #####:  894:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  895:	      break;
        -:  896:	    }
        -:  897:	}
        -:  898:
        -:  899:
    #####:  900:      return 0;
        -:  901:
        -:  902:    case smithy:
        -:  903:      //+3 Cards
        1:  904:      smithyfun(currentPlayer, state, handPos);
call    0 returned 100%
        -:  905:
        -:  906:    case village:
        1:  907:      villagefun(handPos, currentPlayer, state);
call    0 returned 100%
        -:  908:
        -:  909:    case baron:
        1:  910:      state->numBuys++;//Increase buys by 1!
        1:  911:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  912:	int p = 0;//Iterator for hand!
        1:  913:	int card_not_discarded = 1;//Flag for discard set!
        5:  914:	while(card_not_discarded){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  915:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  916:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  917:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  918:	    state->discardCount[currentPlayer]++;
        8:  919:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7:  920:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  921:	    }
        1:  922:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  923:	    state->handCount[currentPlayer]--;
        1:  924:	    card_not_discarded = 0;//Exit the loop
        -:  925:	  }
        2:  926:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  927:	    if(DEBUG) {
        -:  928:	      printf("No estate cards in your hand, invalid choice\n");
        -:  929:	      printf("Must gain an estate if there are any\n");
        -:  930:	    }
    #####:  931:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  932:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  933:	      state->supplyCount[estate]--;//Decrement estates
    #####:  934:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  935:		isGameOver(state);
call    0 never executed
        -:  936:	      }
        -:  937:	    }
    #####:  938:	    card_not_discarded = 0;//Exit the loop
        -:  939:	  }
        -:  940:
        -:  941:	  else{
        2:  942:	    p++;//Next card
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:
        -:  947:      else{
    #####:  948:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  949:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  950:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  951:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  952:	    isGameOver(state);
call    0 never executed
        -:  953:	  }
        -:  954:	}
        -:  955:      }
        -:  956:
        -:  957:
        1:  958:      return 0;
        -:  959:
        -:  960:    case great_hall:
    #####:  961:      great_hallfun(currentPlayer, state, handPos);
call    0 never executed
        -:  962:
        -:  963:    case minion:
        -:  964:      //+1 action
    #####:  965:      state->numActions++;
        -:  966:
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  969:
    #####:  970:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  971:	{
    #####:  972:	  state->coins = state->coins + 2;
        -:  973:	}
        -:  974:
    #####:  975:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  976:	{
        -:  977:	  //discard hand
    #####:  978:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  979:	    {
    #####:  980:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  981:	    }
        -:  982:
        -:  983:	  //draw 4
    #####:  984:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	    {
    #####:  986:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  987:	    }
        -:  988:
        -:  989:	  //other players discard hand and redraw if hand size > 4
    #####:  990:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	    {
    #####:  992:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  993:		{
    #####:  994:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  995:		    {
        -:  996:		      //discard hand
    #####:  997:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  998:			{
    #####:  999:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1000:			}
        -: 1001:
        -: 1002:		      //draw 4
    #####: 1003:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1004:			{
    #####: 1005:			  drawCard(i, state);
call    0 never executed
        -: 1006:			}
        -: 1007:		    }
        -: 1008:		}
        -: 1009:	    }
        -: 1010:
        -: 1011:	}
    #####: 1012:      return 0;
        -: 1013:
        -: 1014:    case steward:
        1: 1015:      stewardfun(choice1, choice2, choice3, handPos, currentPlayer, state);
call    0 returned 100%
        -: 1016:
        -: 1017:
        -: 1018:    case tribute:
        1: 1019:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1020:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1021:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	  state->deckCount[nextPlayer]--;
        -: 1023:	}
    #####: 1024:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:	  state->discardCount[nextPlayer]--;
        -: 1027:	}
        -: 1028:	else{
        -: 1029:	  //No Card to Reveal
        -: 1030:	  if (DEBUG){
        -: 1031:	    printf("No cards to reveal\n");
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:
        -: 1036:      else{
        1: 1037:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1038:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1039:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:	    state->deckCount[nextPlayer]++;
    #####: 1041:	    state->discard[nextPlayer][i] = -1;
    #####: 1042:	    state->discardCount[nextPlayer]--;
        -: 1043:	  }
        -: 1044:
    #####: 1045:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1046:	}
        1: 1047:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1048:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1049:	state->deckCount[nextPlayer]--;
        1: 1050:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1051:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1052:	state->deckCount[nextPlayer]--;
        -: 1053:      }
        -: 1054:
        1: 1055:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1056:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:	state->playedCardCount++;
    #####: 1058:	tributeRevealedCards[1] = -1;
        -: 1059:      }
        -: 1060:
        4: 1061:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1062:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1: 1063:	  state->coins += 2;
        -: 1064:	}
        -: 1065:
        2: 1066:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        1: 1067:	  drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1068:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1069:	}
        -: 1070:	else{//Action Card
        1: 1071:	  state->numActions = state->numActions + 2;
        -: 1072:	}
        -: 1073:      }
        -: 1074:
        1: 1075:      return 0;
        -: 1076:
        -: 1077:    case ambassador:
    #####: 1078:      j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  return -1;
        -: 1088:	}
        -: 1089:
    #####: 1090:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1093:	    {
    #####: 1094:	      j++;
        -: 1095:	    }
        -: 1096:	}
    #####: 1097:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:
        -: 1102:      if (DEBUG)
        -: 1103:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:      //increase supply count for choosen card by amount being discarded
    #####: 1106:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:
        -: 1108:      //each other player gains a copy of revealed card
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1114:	    }
        -: 1115:	}
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1119:
        -: 1120:      //trash copies of cards returned to supply
    #####: 1121:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1126:		{
    #####: 1127:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:		  break;
        -: 1129:		}
        -: 1130:	    }
        -: 1131:	}
        -: 1132:
    #####: 1133:      return 0;
        -: 1134:
        -: 1135:    case cutpurse:
        -: 1136:
    #####: 1137:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1138:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1141:	    {
    #####: 1142:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1143:		{
    #####: 1144:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1145:		    {
    #####: 1146:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1147:		      break;
        -: 1148:		    }
    #####: 1149:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1150:		    {
    #####: 1151:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1152:			{
        -: 1153:			  if (DEBUG)
        -: 1154:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1155:			}
    #####: 1156:		      break;
        -: 1157:		    }
        -: 1158:		}
        -: 1159:
        -: 1160:	    }
        -: 1161:
        -: 1162:	}
        -: 1163:
        -: 1164:      //discard played card from hand
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1166:
    #####: 1167:      return 0;
        -: 1168:
        -: 1169:
        -: 1170:    case embargo:
        -: 1171:      //+2 Coins
        2: 1172:      state->coins = state->coins + 2;
        -: 1173:
        -: 1174:      //see if selected pile is in play
        2: 1175:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1176:	{
        1: 1177:	  return -1;
        -: 1178:	}
        -: 1179:
        -: 1180:      //add embargo token to selected supply pile
        1: 1181:      state->embargoTokens[choice1]++;
        -: 1182:
        -: 1183:      //trash card
        1: 1184:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1185:      return 0;
        -: 1186:
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1193:      return 0;
        -: 1194:
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:
    #####: 1199:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1205:	}
        -: 1206:
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1209:      return 0;
        -: 1210:
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
        1: 1223:      index = -1;
        6: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1225:	{
        5: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
        1: 1232:      if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1242:	    }
        -: 1243:
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:
        -: 1248:      //no second treasure_map found in hand
        1: 1249:      return -1;
        -: 1250:    }
        -: 1251:
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:  //if card is not trashed, added to Played pile
       11: 1259:  if (trashFlag < 1)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1260:    {
        -: 1261:      //add card to played pile
        8: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:
        -: 1266:  //set played card to -1
       11: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:  //remove card from player's hand
       11: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
       11: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
       11: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
       11: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
       11: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:
       11: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
    #####: 1313:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:
    #####: 1327:  return 0;
        -: 1328:}
        -: 1329:
function updateCoins called 11 returned 100% blocks executed 91%
       11: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:
        -: 1334:  //reset coin count
       11: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
       69: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1339:    {
       58: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -: 1341:	{
       36: 1342:	  state->coins += 1;
        -: 1343:	}
       22: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
        -: 1347:	}
       22: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -: 1349:	{
        2: 1350:	  state->coins += 3;
        -: 1351:	}
        -: 1352:    }
        -: 1353:
        -: 1354:  //add bonus
       11: 1355:  state->coins += bonus;
        -: 1356:
       11: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c

!____________Random Card Test 2 - Smithy__________!

Testing with 2 Players
FAIL 54: Discarded later card
FAIL 54: Smithy was not discarded
FAIL 60: Discarded later card
FAIL 60: Smithy was not discarded
FAIL 70: Discarded later card
FAIL 70: Smithy was not discarded
FAIL 73: Discarded later card
FAIL 73: Smithy was not discarded
FAIL 74: Discarded later card
FAIL 74: Smithy was not discarded
FAIL 78: Smithy was not discarded
FAIL 90: Discarded later card
FAIL 90: Smithy was not discarded
FAIL 91: Discarded later card
FAIL 91: Smithy was not discarded
FAIL 92: Smithy was not discarded
FAIL 100: Discarded later card
FAIL 100: Smithy was not discarded
FAIL 101: Discarded later card
FAIL 101: Smithy was not discarded
FAIL 106: Discarded later card
FAIL 106: Smithy was not discarded

 Failure Counts

Bad discard 2nd Half: 10
Played card was not discarded: 12
_______________________

Testing with 3 Players
FAIL 19: Discarded later card
FAIL 19: Smithy was not discarded
FAIL 28: Discarded later card
FAIL 28: Smithy was not discarded
FAIL 37: Discarded later card
FAIL 37: Smithy was not discarded
FAIL 47: Discarded later card
FAIL 47: Smithy was not discarded
FAIL 52: Discarded later card
FAIL 52: Smithy was not discarded
FAIL 56: Discarded later card
FAIL 56: Smithy was not discarded
FAIL 59: Discarded later card
FAIL 59: Smithy was not discarded
FAIL 67: Discarded later card
FAIL 67: Smithy was not discarded
FAIL 68: Discarded later card
FAIL 68: Smithy was not discarded
FAIL 74: Discarded later card
FAIL 74: Smithy was not discarded
FAIL 77: Discarded later card
FAIL 77: Smithy was not discarded
FAIL 78: Discarded later card
FAIL 78: Smithy was not discarded
FAIL 82: Discarded later card
FAIL 82: Smithy was not discarded
FAIL 83: Discarded later card
FAIL 83: Smithy was not discarded
FAIL 85: Discarded later card
FAIL 85: Smithy was not discarded
FAIL 86: Discarded later card
FAIL 86: Smithy was not discarded
FAIL 92: Discarded later card
FAIL 92: Smithy was not discarded
FAIL 97: Discarded later card
FAIL 97: Smithy was not discarded
FAIL 98: Discarded later card
FAIL 98: Smithy was not discarded
FAIL 101: Discarded later card
FAIL 101: Smithy was not discarded
FAIL 102: Discarded later card
FAIL 102: Smithy was not discarded
FAIL 110: Discarded later card
FAIL 110: Smithy was not discarded
FAIL 115: Smithy was not discarded
FAIL 119: Discarded later card
FAIL 119: Smithy was not discarded
FAIL 121: Discarded later card
FAIL 121: Smithy was not discarded
FAIL 123: Smithy was not discarded
FAIL 125: Smithy was not discarded
FAIL 126: Discarded later card
FAIL 126: Smithy was not discarded
FAIL 128: Smithy was not discarded
FAIL 131: Discarded later card
FAIL 131: Smithy was not discarded
FAIL 135: Discarded later card
FAIL 135: Smithy was not discarded
FAIL 137: Discarded later card
FAIL 137: Smithy was not discarded
FAIL 138: Discarded later card
FAIL 138: Smithy was not discarded
FAIL 140: Discarded later card
FAIL 140: Smithy was not discarded
FAIL 141: Discarded later card
FAIL 141: Smithy was not discarded
FAIL 145: Discarded later card
FAIL 145: Smithy was not discarded
FAIL 147: Discarded later card
FAIL 147: Smithy was not discarded
FAIL 149: Discarded later card
FAIL 149: Smithy was not discarded
FAIL 154: Discarded later card
FAIL 154: Smithy was not discarded
FAIL 155: Discarded later card
FAIL 155: Smithy was not discarded

 Failure Counts

Bad discard 2nd Half: 36
Played card was not discarded: 40
_______________________

Testing with 4 Players
FAIL 29: Discarded later card
FAIL 29: Smithy was not discarded
FAIL 38: Smithy was not discarded
FAIL 41: Smithy was not discarded
FAIL 53: Smithy was not discarded
FAIL 54: Discarded later card
FAIL 54: Smithy was not discarded
FAIL 55: Smithy was not discarded
FAIL 62: Discarded later card
FAIL 62: Smithy was not discarded
FAIL 67: Smithy was not discarded
FAIL 69: Discarded later card
FAIL 69: Smithy was not discarded
FAIL 70: Smithy was not discarded
FAIL 74: Discarded later card
FAIL 74: Smithy was not discarded
FAIL 86: Discarded later card
FAIL 86: Smithy was not discarded
FAIL 94: Discarded later card
FAIL 94: Smithy was not discarded
FAIL 102: Discarded later card
FAIL 102: Smithy was not discarded
FAIL 103: Discarded later card
FAIL 103: Smithy was not discarded
FAIL 110: Discarded later card
FAIL 110: Smithy was not discarded
FAIL 111: Discarded later card
FAIL 111: Smithy was not discarded
FAIL 114: Discarded later card
FAIL 114: Smithy was not discarded
FAIL 118: Discarded later card
FAIL 118: Smithy was not discarded
FAIL 122: Discarded later card
FAIL 122: Smithy was not discarded
FAIL 126: Discarded later card
FAIL 126: Smithy was not discarded
FAIL 130: Discarded later card
FAIL 130: Smithy was not discarded
FAIL 142: Discarded later card
FAIL 142: Smithy was not discarded
FAIL 146: Discarded later card
FAIL 146: Smithy was not discarded
FAIL 150: Discarded later card
FAIL 150: Smithy was not discarded
FAIL 154: Discarded later card
FAIL 154: Smithy was not discarded
FAIL 158: Discarded later card
FAIL 158: Smithy was not discarded
FAIL 166: Discarded later card
FAIL 166: Smithy was not discarded
FAIL 170: Discarded later card
FAIL 170: Smithy was not discarded

 Failure Counts

Bad discard 2nd Half: 23
Played card was not discarded: 29
_______________________

File 'dominion.c'
Lines executed:63.75% of 560
Branches executed:61.15% of 417
Taken at least once:52.28% of 417
Calls executed:65.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:238
        -:    0:Programs:67
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://I contain bugs
function compare called 1726107 returned 100% blocks executed 100%
  1726107:    9:int compare(const void* a, const void* b) {
  1726107:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   855984:   11:  return 1;
   870123:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
   416061:   13:  return -1;
   454062:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7, int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 708 returned 100% blocks executed 95%
      708:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;
        -:   42:  //set up random number generator
      708:   43:  SelectStream(1);
call    0 returned 100%
      708:   44:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   45:
        -:   46:  //check number of players
      708:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   48:  {
    #####:   49:    return -1;
        -:   50:  }
        -:   51:
        -:   52:  //set number of players
      708:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
     7788:   56:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   57:  {
    77880:   58:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   59:    {
    70800:   60:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   61:      {
    #####:   62:        return -1;
        -:   63:      }
        -:   64:    }
        -:   65:  }
        -:   66:
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
      708:   72:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   73:  {
      238:   74:    state->supplyCount[curse] = 10;
        -:   75:  }
      470:   76:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   77:  {
      235:   78:    state->supplyCount[curse] = 20;
        -:   79:  }
        -:   80:  else
        -:   81:  {
      235:   82:    state->supplyCount[curse] = 30;
        -:   83:  }
        -:   84:
        -:   85:  //set number of Victory cards
      708:   86:  if (numPlayers == 2)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   87:  {
      238:   88:    state->supplyCount[estate] = 8;
      238:   89:    state->supplyCount[duchy] = 8;
      238:   90:    state->supplyCount[province] = 8;
        -:   91:  }
        -:   92:  else
        -:   93:  {
      470:   94:    state->supplyCount[estate] = 12;
      470:   95:    state->supplyCount[duchy] = 12;
      470:   96:    state->supplyCount[province] = 12;
        -:   97:  }
        -:   98:
        -:   99:  //set number of Treasure cards
      708:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      708:  101:  state->supplyCount[silver] = 40;
      708:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
    14868:  105:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  106:  {
   116820:  107:    for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  108:    {
   109740:  109:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
     7080:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  113:        {
     2832:  114:          if (numPlayers == 2){
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
      476:  115:            state->supplyCount[i] = 8;
        -:  116:          }
      940:  117:          else{ state->supplyCount[i] = 12; }
        -:  118:        }
        -:  119:        else
        -:  120:        {
     5664:  121:          state->supplyCount[i] = 10;
        -:  122:        }
     7080:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:      {
   102660:  127:        state->supplyCount[i] = -1;
        -:  128:      }
        -:  129:    }
        -:  130:
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
     2829:  137:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  138:  {
     2121:  139:    state->deckCount[i] = 0;
     8484:  140:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  141:    {
     6363:  142:      state->deck[i][j] = estate;
     6363:  143:      state->deckCount[i]++;
        -:  144:    }
    16968:  145:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  146:    {
    14847:  147:      state->deck[i][j] = copper;
    14847:  148:      state->deckCount[i]++;
        -:  149:    }
        -:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
     2829:  153:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:  {
     2121:  155:    if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:    {
    #####:  157:      return -1;
        -:  158:    }
        -:  159:  }
        -:  160:
        -:  161:  //draw player hands
     2829:  162:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:  {
        -:  164:    //initialize hand size to zero
     2121:  165:    state->handCount[i] = 0;
     2121:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //	{
        -:  170:    //	  drawCard(i, state);
        -:  171:    //	}
        -:  172:  }
        -:  173:
        -:  174:  //set embargo tokens to 0 for all supply piles
    19824:  175:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:  {
    19116:  177:    state->embargoTokens[i] = 0;
        -:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
      708:  181:  state->outpostPlayed = 0;
      708:  182:  state->phase = 0;
      708:  183:  state->numActions = 1;
      708:  184:  state->numBuys = 1;
      708:  185:  state->playedCardCount = 0;
      708:  186:  state->whoseTurn = 0;
      708:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
     4248:  191:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     3540:  192:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  193:  }
        -:  194:
      708:  195:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  196:
      708:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 58343 returned 100% blocks executed 100%
    58343:  200:int shuffle(int player, struct gameState *state) {
        -:  201:
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
    58343:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
    58343:  208:  if (state->deckCount[player] < 1)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
    24870:  209:  return -1;
    33473:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
   620636:  213:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
   553690:  214:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   553690:  215:    newDeck[newDeckPos] = state->deck[player][card];
   553690:  216:    newDeckPos++;
  3636674:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
  3082984:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
   553690:  220:    state->deckCount[player]--;
        -:  221:  }
   587163:  222:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
   553690:  223:    state->deck[player][i] = newDeck[i];
   553690:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
    33473:  227:  return 0;
        -:  228:}
        -:  229:
function playCard called 88015 returned 100% blocks executed 87%
    88015:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  231:{
        -:  232:  int card;
    88015:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    88015:  236:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  237:  {
    #####:  238:    return -1;
        -:  239:  }
        -:  240:
        -:  241:  //check if player has enough actions
    88015:  242:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  243:  {
    #####:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
    88015:  248:  card = handCard(handPos, state);
call    0 returned 100%
        -:  249:
        -:  250:  //check if selected card is an action
    88015:  251:  if ( card < adventurer || card > treasure_map )
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  252:  {
    51745:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
    36270:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 16% (fallthrough)
branch  2 taken 84%
        -:  258:  {
     5926:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
    30344:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    30344:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  267:
    30344:  268:  return 0;
        -:  269:}
        -:  270:
function buyCard called 88015 returned 100% blocks executed 100%
    88015:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    88015:  279:  who = state->whoseTurn;
        -:  280:
    88015:  281:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  282:    if (DEBUG)
        -:  283:    printf("You do not have any buys left\n");
        2:  284:    return -1;
    88013:  285:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        -:  286:    if (DEBUG)
        -:  287:    printf("There are not any of that type of card left\n");
     3396:  288:    return -1;
    84617:  289:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -:  290:    if (DEBUG)
        -:  291:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    20527:  292:    return -1;
        -:  293:  } else {
    64090:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    64090:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  297:
    64090:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
    64090:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:
    64090:  307:  return 0;
        -:  308:}
        -:  309:
function numHandCards called 471728 returned 100% blocks executed 100%
   471728:  310:int numHandCards(struct gameState *state) {
   471728:  311:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  312:}
        -:  313:
function handCard called 532148 returned 100% blocks executed 100%
   532148:  314:int handCard(int handPos, struct gameState *state) {
   532148:  315:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   532148:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 162531 returned 100% blocks executed 100%
   162531:  319:int supplyCount(int card, struct gameState *state) {
   162531:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 1128438 returned 100% blocks executed 100%
  1128438:  345:int whoseTurn(struct gameState *state) {
  1128438:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 88163 returned 100% blocks executed 100%
    88163:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    88163:  352:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  353:
        -:  354:  //Discard hand
   563521:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
   475358:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   475358:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    88163:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:
        -:  361:  //Code for determining the player
    88163:  362:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
    57083:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    31080:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    88163:  369:  state->outpostPlayed = 0;
    88163:  370:  state->phase = 0;
    88163:  371:  state->numActions = 1;
    88163:  372:  state->coins = 0;
    88163:  373:  state->numBuys = 1;
    88163:  374:  state->playedCardCount = 0;
    88163:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
   528978:  379:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   440815:  380:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    88163:  384:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  385:
    88163:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 88988 returned 100% blocks executed 100%
    88988:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    88988:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  395:  {
       38:  396:    return 1;
        -:  397:  }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    88950:  400:  j = 0;
  2312700:  401:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  402:  {
  2223750:  403:    if (state->supplyCount[i] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  404:    {
    37330:  405:      j++;
        -:  406:    }
        -:  407:  }
    88950:  408:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  409:  {
      447:  410:    return 1;
        -:  411:  }
        -:  412:
    88503:  413:  return 0;
        -:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:  {
    #####:  423:    if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:    if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:    if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:    if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:    if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:  }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:  {
    #####:  445:    if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:    if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:    if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:    if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:    if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:  }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:  {
        -:  465:    //set unused player scores to -9999
    #####:  466:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:    {
    #####:  468:      players[i] = -9999;
        -:  469:    }
        -:  470:    else
        -:  471:    {
    #####:  472:      players[i] = scoreFor (i, state);
call    0 never executed
        -:  473:    }
        -:  474:  }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      j = i;
        -:  483:    }
        -:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:    {
    #####:  493:      players[i]++;
        -:  494:    }
        -:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      j = i;
        -:  504:    }
        -:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      players[i] = 1;
        -:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
        -:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 540099 returned 100% blocks executed 100%
   540099:  524:int drawCard(int player, struct gameState *state) {
        -:  525:  int count;
        -:  526:  int deckCounter;
   540099:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  528:
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
   580331:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   533125:  533:      state->deck[player][i] = state->discard[player][i];
   533125:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    47206:  537:    state->deckCount[player] = state->discardCount[player];
    47206:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    47206:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:
    47206:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    47206:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:
    47206:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    47206:  558:    if (deckCounter == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
    15491:  559:    return -1;
        -:  560:
    31715:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    31715:  562:    state->deckCount[player]--;
    31715:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   492893:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   492893:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   492893:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   492893:  575:    state->deckCount[player]--;
   492893:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   524608:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 157122 returned 100% blocks executed 67%
   157122:  582:int getCost(int cardNumber)
        -:  583:{
   157122:  584:  switch( cardNumber )
branch  0 taken 3%
branch  1 taken 6%
branch  2 taken 6%
branch  3 taken 5%
branch  4 taken 9%
branch  5 taken 8%
branch  6 taken 5%
branch  7 taken 5%
branch  8 taken 6%
branch  9 taken 6%
branch 10 taken 6%
branch 11 taken 6%
branch 12 taken 6%
branch 13 taken 6%
branch 14 taken 6%
branch 15 taken 6%
branch 16 taken 6%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 1%
        -:  585:  {
        -:  586:    case curse:
     4609:  587:    return 0;
        -:  588:    case estate:
     9362:  589:    return 2;
        -:  590:    case duchy:
     8965:  591:    return 5;
        -:  592:    case province:
     7765:  593:    return 8;
        -:  594:    case copper:
    13365:  595:    return 0;
        -:  596:    case silver:
    12059:  597:    return 3;
        -:  598:    case gold:
     8217:  599:    return 6;
        -:  600:    case adventurer:
     8290:  601:    return 6;
        -:  602:    case council_room:
     9461:  603:    return 5;
        -:  604:    case feast:
     9395:  605:    return 4;
        -:  606:    case gardens:
     9338:  607:    return 4;
        -:  608:    case mine:
     8934:  609:    return 5;
        -:  610:    case remodel:
     9730:  611:    return 4;
        -:  612:    case smithy:
     9366:  613:    return 4;
        -:  614:    case village:
     9403:  615:    return 3;
        -:  616:    case baron:
     9316:  617:    return 4;
        -:  618:    case great_hall:
     9543:  619:    return 3;
        -:  620:    case minion:
    #####:  621:    return 5;
        -:  622:    case steward:
    #####:  623:    return 3;
        -:  624:    case tribute:
    #####:  625:    return 5;
        -:  626:    case ambassador:
    #####:  627:    return 3;
        -:  628:    case cutpurse:
    #####:  629:    return 4;
        -:  630:    case embargo:
    #####:  631:    return 2;
        -:  632:    case outpost:
    #####:  633:    return 5;
        -:  634:    case salvager:
    #####:  635:    return 4;
        -:  636:    case sea_hag:
    #####:  637:    return 4;
        -:  638:    case treasure_map:
    #####:  639:    return 4;
        -:  640:  }
        -:  641:
        4:  642:  return -1;
        -:  643:}
        -:  644:
        -:  645:
function adventurerEffect called 5665 returned 100% blocks executed 100%
     5665:  646:int adventurerEffect (struct gameState *state, int currentPlayer) {
     5665:  647:  int drawntreasure = 0;
        -:  648:  int temphand[MAX_HAND];// moved above the if statement
     5665:  649:  int z = 1;// this is the counter for the temp hand
        -:  650:  int cardDrawn;
        -:  651:
    50998:  652:  while(drawntreasure < 2){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
    39668:  653:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     9016:  654:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  655:    }
        -:  656:    //draw card is what updates handCount
    39668:  657:    drawCard(currentPlayer, state);
call    0 returned 100%
    39668:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    39668:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 79% (fallthrough)
branch  1 taken 21%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
    11330:  660:    drawntreasure++;
        -:  661:    else{
    28338:  662:      temphand[z]=cardDrawn;
    28338:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    28338:  664:      z++;
        -:  665:    }
        -:  666:  }
    38803:  667:  while(z-1 >= 0){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    27473:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    27473:  669:    z=z-1;
        -:  670:  }
     5665:  671:  return 0;
        -:  672:}
        -:  673:
        -:  674:
function smithyEffect called 12764 returned 100% blocks executed 100%
    12764:  675:int smithyEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  676:  //+3 Cards
        -:  677:  int i;
    51056:  678:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  679:  {
    38292:  680:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  681:  }
        -:  682:
        -:  683:  //discard card from hand
    12764:  684:  discardCard(handPos+1, currentPlayer, state, 0);
call    0 returned 100%
    12764:  685:  return 0;
        -:  686:}
        -:  687:
function embargoEffect called 0 returned 0% blocks executed 0%
    #####:  688:int embargoEffect (struct gameState *state, int currentPlayer, int handPos, int choice1) {
        -:  689:  //+2 Coins
    #####:  690:  state->coins = state->coins + 2;
        -:  691:
        -:  692:  //see if selected pile is in play
    #####:  693:  if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  694:  {
    #####:  695:    return -1;
        -:  696:  }
        -:  697:
        -:  698:  //add embargo token to selected supply pile
    #####:  699:  state->embargoTokens[choice1]++;
        -:  700:
        -:  701:  //trash card
    #####:  702:  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  703:  return 0;
        -:  704:}
        -:  705:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  706:int cutpurseEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  707:  int i, j, k;
        -:  708:
    #####:  709:  updateCoins(currentPlayer, state, 3);
call    0 never executed
    #####:  710:  for (i = 0; i < state->numPlayers-1; i++)
branch  0 never executed
branch  1 never executed
        -:  711:  {
    #####:  712:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  713:    {
    #####:  714:      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  715:      {
    #####:  716:        if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  717:        {
    #####:  718:          discardCard(j, i, state, 0);
call    0 never executed
    #####:  719:          break;
        -:  720:        }
    #####:  721:        if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  722:        {
    #####:  723:          for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  724:          {
        -:  725:            if (DEBUG)
        -:  726:            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  727:          }
    #####:  728:          break;
        -:  729:        }
        -:  730:      }
        -:  731:
        -:  732:    }
        -:  733:
        -:  734:  }
        -:  735:
        -:  736:  //discard played card from hand
    #####:  737:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  738:
    #####:  739:  return 0;
        -:  740:}
        -:  741:
function council_roomEffect called 1762 returned 100% blocks executed 100%
     1762:  742:int council_roomEffect (struct gameState *state, int currentPlayer, int handPos) {
        -:  743:  int i;
        -:  744:  //+4 Cards
    10572:  745:  for (i = 0; i <= 4; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  746:  {
     8810:  747:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  748:  }
        -:  749:
        -:  750:  //+1 Buy
     1762:  751:  state->numBuys++;
        -:  752:
        -:  753:  //Each other player draws a card
     8791:  754:  for (i = 0; i <= state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  755:  {
     7029:  756:    if ( i != currentPlayer )
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  757:    {
     5267:  758:      drawCard(i, state);
call    0 returned 100%
        -:  759:    }
        -:  760:  }
        -:  761:
        -:  762:  //put played card in played card pile
     1762:  763:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  764:
     1762:  765:  return 0;
        -:  766:}
        -:  767:
function cardEffect called 36270 returned 100% blocks executed 53%
    36270:  768:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  769:{
        -:  770:  int i;
        -:  771:  int j;
        -:  772:  int k;
        -:  773:  int x;
        -:  774:  int index;
    36270:  775:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    36270:  776:  int nextPlayer = currentPlayer + 1;
        -:  777:
    36270:  778:  int tributeRevealedCards[2] = {-1, -1};
        -:  779:  int temphand[MAX_HAND];// moved above the if statement
    36270:  780:  int drawntreasure=0;
        -:  781:  int cardDrawn;
    36270:  782:  int z = 0;// this is the counter for the temp hand
    36270:  783:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    13071:  784:    nextPlayer = 0;
        -:  785:  }
        -:  786:
        -:  787:
        -:  788:
        -:  789:  //uses switch to select card and perform actions
    36270:  790:  switch( card )
branch  0 taken 16%
branch  1 taken 5%
branch  2 taken 7%
branch  3 taken 7%
branch  4 taken 6%
branch  5 taken 6%
branch  6 taken 35%
branch  7 taken 5%
branch  8 taken 8%
branch  9 taken 5%
branch 10 taken 1%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 1%
branch 20 taken 0%
        -:  791:  {
        -:  792:    case adventurer:
     5665:  793:    return adventurerEffect(state, currentPlayer);
call    0 returned 100%
        -:  794:
        -:  795:    case council_room:
     1762:  796:    return council_roomEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  797:
        -:  798:    case feast:
        -:  799:    //gain card with cost up to 5
        -:  800:    //Backup hand
    18771:  801:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
    16080:  802:      temphand[i] = state->hand[currentPlayer][i];//Backup card
    16080:  803:      state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  804:    }
        -:  805:    //Backup hand
        -:  806:
        -:  807:    //Update Coins for Buy
     2691:  808:    updateCoins(currentPlayer, state, 5);
call    0 returned 100%
     2691:  809:    x = 1;//Condition to loop on
     8073:  810:    while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
     2691:  811:      if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  812:        if (DEBUG)
        -:  813:        printf("None of that card left, sorry!\n");
        -:  814:
        -:  815:        if (DEBUG){
        -:  816:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  817:        }
        -:  818:      }
     2691:  819:      else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  820:        printf("That card is too expensive!\n");
call    0 never executed
        -:  821:
        -:  822:        if (DEBUG){
        -:  823:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  824:        }
        -:  825:      }
        -:  826:      else{
        -:  827:
        -:  828:        if (DEBUG){
        -:  829:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:        }
        -:  831:
     2691:  832:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
     2691:  833:        x = 0;//No more buying cards
        -:  834:
        -:  835:        if (DEBUG){
        -:  836:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:        }
        -:  838:
        -:  839:      }
        -:  840:    }
        -:  841:
        -:  842:    //Reset Hand
    18771:  843:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
    16080:  844:      state->hand[currentPlayer][i] = temphand[i];
    16080:  845:      temphand[i] = -1;
        -:  846:    }
        -:  847:    //Reset Hand
        -:  848:
     2691:  849:    return 0;
        -:  850:
        -:  851:    case gardens:
     2634:  852:    return -1;
        -:  853:
        -:  854:    case mine:
     2118:  855:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  856:
     2118:  857:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 58% (fallthrough)
branch  3 taken 42%
        -:  858:    {
     1434:  859:      return -1;
        -:  860:    }
        -:  861:
      684:  862:    if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  863:    {
    #####:  864:      return -1;
        -:  865:    }
        -:  866:
      684:  867:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 49% (fallthrough)
branch  3 taken 51%
        -:  868:    {
      332:  869:      return -1;
        -:  870:    }
        -:  871:
      352:  872:    gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  873:
        -:  874:    //discard card from hand
      352:  875:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  876:
        -:  877:    //discard trashed card
     1019:  878:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  879:    {
     1019:  880:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:  881:      {
      352:  882:        discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
      352:  883:        break;
        -:  884:      }
        -:  885:    }
        -:  886:
      352:  887:    return 0;
        -:  888:
        -:  889:    case remodel:
     2178:  890:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  891:
     2178:  892:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 70% (fallthrough)
branch  3 taken 30%
        -:  893:    {
     1526:  894:      return -1;
        -:  895:    }
        -:  896:
      652:  897:    gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  898:
        -:  899:    //discard card from hand
      652:  900:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  901:
        -:  902:    //discard trashed card
     1028:  903:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  904:    {
     1024:  905:      if (state->hand[currentPlayer][i] == j)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
        -:  906:      {
      648:  907:        discardCard(i, currentPlayer, state, 0);
call    0 returned 100%
      648:  908:        break;
        -:  909:      }
        -:  910:    }
        -:  911:
        -:  912:
      652:  913:    return 0;
        -:  914:
        -:  915:    case smithy:
    12764:  916:    return smithyEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  917:
        -:  918:    case village:
        -:  919:    //+1 Card
     1843:  920:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  921:
        -:  922:    //+2 Actions
     1843:  923:    state->numActions = state->numActions + 2;
        -:  924:
        -:  925:    //discard played card from hand
     1843:  926:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1843:  927:    return 0;
        -:  928:
        -:  929:    case baron:
     2757:  930:    state->numBuys++;//Increase buys by 1!
     2757:  931:    if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
     1921:  932:      int p = 0;//Iterator for hand!
     1921:  933:      int card_not_discarded = 1;//Flag for discard set!
    13069:  934:      while(card_not_discarded){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     9227:  935:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      999:  936:          state->coins += 4;//Add 4 coins to the amount of coins
      999:  937:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      999:  938:          state->discardCount[currentPlayer]++;
     4186:  939:          for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
     3187:  940:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  941:          }
      999:  942:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      999:  943:          state->handCount[currentPlayer]--;
      999:  944:          card_not_discarded = 0;//Exit the loop
        -:  945:        }
     8228:  946:        else if (p > state->handCount[currentPlayer]){
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  947:          if(DEBUG) {
        -:  948:            printf("No estate cards in your hand, invalid choice\n");
        -:  949:            printf("Must gain an estate if there are any\n");
        -:  950:          }
      922:  951:          if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 69% (fallthrough)
branch  2 taken 31%
      638:  952:            gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
      638:  953:            state->supplyCount[estate]--;//Decrement estates
      638:  954:            if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 12% (fallthrough)
branch  2 taken 88%
       75:  955:              isGameOver(state);
call    0 returned 100%
        -:  956:            }
        -:  957:          }
      922:  958:          card_not_discarded = 0;//Exit the loop
        -:  959:        }
        -:  960:
        -:  961:        else{
     7306:  962:          p++;//Next card
        -:  963:        }
        -:  964:      }
        -:  965:    }
        -:  966:
        -:  967:    else{
      836:  968:      if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
      504:  969:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
      504:  970:        state->supplyCount[estate]--;//Decrement Estates
      504:  971:        if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 8% (fallthrough)
branch  2 taken 92%
       42:  972:          isGameOver(state);
call    0 returned 100%
        -:  973:        }
        -:  974:      }
        -:  975:    }
        -:  976:
        -:  977:
     2757:  978:    return 0;
        -:  979:
        -:  980:    case great_hall:
        -:  981:    //+1 Card
     1852:  982:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  983:
        -:  984:    //+1 Actions
     1852:  985:    state->numActions++;
        -:  986:
        -:  987:    //discard card from hand
     1852:  988:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1852:  989:    return 0;
        -:  990:
        -:  991:    case minion:
        -:  992:    //+1 action
        5:  993:    state->numActions++;
        -:  994:
        -:  995:    //discard card from hand
        5:  996:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  997:
        5:  998:    if (choice1)		//+2 coins
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  999:    {
        2: 1000:      state->coins = state->coins + 2;
        -: 1001:    }
        -: 1002:
        3: 1003:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1004:    {
        -: 1005:      //discard hand
       18: 1006:      while(numHandCards(state) > 0)
call    0 returned 100%
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
        -: 1007:      {
       12: 1008:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1009:      }
        -: 1010:
        -: 1011:      //draw 4
       15: 1012:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1013:      {
       12: 1014:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1015:      }
        -: 1016:
        -: 1017:      //other players discard hand and redraw if hand size > 4
       15: 1018:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1019:      {
       12: 1020:        if (i != currentPlayer)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1021:        {
        9: 1022:          if ( state->handCount[i] > 4 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1023:          {
        -: 1024:            //discard hand
    #####: 1025:            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1026:            {
    #####: 1027:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1028:            }
        -: 1029:
        -: 1030:            //draw 4
    #####: 1031:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1032:            {
    #####: 1033:              drawCard(i, state);
call    0 never executed
        -: 1034:            }
        -: 1035:          }
        -: 1036:        }
        -: 1037:      }
        -: 1038:
        -: 1039:    }
        5: 1040:    return 0;
        -: 1041:
        -: 1042:    case steward:
    #####: 1043:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1044:    {
        -: 1045:      //+2 cards
    #####: 1046:      drawCard(currentPlayer, state);
call    0 never executed
    #####: 1047:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1048:    }
    #####: 1049:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1050:    {
        -: 1051:      //+2 coins
    #####: 1052:      state->coins = state->coins + 2;
        -: 1053:    }
        -: 1054:    else
        -: 1055:    {
        -: 1056:      //trash 2 cards in hand
    #####: 1057:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1058:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1059:    }
        -: 1060:
        -: 1061:    //discard card from hand
    #####: 1062:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1063:    return 0;
        -: 1064:
        -: 1065:    case tribute:
    #####: 1066:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1067:      if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1068:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:        state->deckCount[nextPlayer]--;
        -: 1070:      }
    #####: 1071:      else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1072:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1073:        state->discardCount[nextPlayer]--;
        -: 1074:      }
        -: 1075:      else{
        -: 1076:        //No Card to Reveal
        -: 1077:        if (DEBUG){
        -: 1078:          printf("No cards to reveal\n");
        -: 1079:        }
        -: 1080:      }
        -: 1081:    }
        -: 1082:
        -: 1083:    else{
    #####: 1084:      if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1085:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1086:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1087:          state->deckCount[nextPlayer]++;
    #####: 1088:          state->discard[nextPlayer][i] = -1;
    #####: 1089:          state->discardCount[nextPlayer]--;
        -: 1090:        }
        -: 1091:
    #####: 1092:        shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1093:      }
    #####: 1094:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1095:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1096:      state->deckCount[nextPlayer]--;
    #####: 1097:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1098:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1099:      state->deckCount[nextPlayer]--;
        -: 1100:    }
        -: 1101:
    #####: 1102:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1103:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1104:      state->playedCardCount++;
    #####: 1105:      tributeRevealedCards[1] = -1;
        -: 1106:    }
        -: 1107:
    #####: 1108:    for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1109:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1110:        state->coins += 2;
        -: 1111:      }
        -: 1112:
    #####: 1113:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1114:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1115:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1116:      }
        -: 1117:      else{//Action Card
    #####: 1118:        state->numActions = state->numActions + 2;
        -: 1119:      }
        -: 1120:    }
        -: 1121:
    #####: 1122:    return 0;
        -: 1123:
        -: 1124:    case ambassador:
    #####: 1125:    j = 0;		//used to check if player has enough cards to discard
        -: 1126:
    #####: 1127:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1128:    {
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:
    #####: 1132:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1133:    {
    #####: 1134:      return -1;
        -: 1135:    }
        -: 1136:
    #####: 1137:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1138:    {
    #####: 1139:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1140:      {
    #####: 1141:        j++;
        -: 1142:      }
        -: 1143:    }
    #####: 1144:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1145:    {
    #####: 1146:      return -1;
        -: 1147:    }
        -: 1148:
        -: 1149:    if (DEBUG)
        -: 1150:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1151:
        -: 1152:    //increase supply count for choosen card by amount being discarded
    #####: 1153:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1154:
        -: 1155:    //each other player gains a copy of revealed card
    #####: 1156:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:    {
    #####: 1158:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1159:      {
    #####: 1160:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1161:      }
        -: 1162:    }
        -: 1163:
        -: 1164:    //discard played card from hand
    #####: 1165:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1166:
        -: 1167:    //trash copies of cards returned to supply
    #####: 1168:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1169:    {
    #####: 1170:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1171:      {
    #####: 1172:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1173:        {
    #####: 1174:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1175:          break;
        -: 1176:        }
        -: 1177:      }
        -: 1178:    }
        -: 1179:
    #####: 1180:    return 0;
        -: 1181:
        -: 1182:    case cutpurse:
    #####: 1183:    return cutpurseEffect(state, currentPlayer, handPos);
call    0 never executed
        -: 1184:
        -: 1185:
        -: 1186:    case embargo:
    #####: 1187:    return embargoEffect(state, currentPlayer, handPos, choice1);
call    0 never executed
        -: 1188:
        -: 1189:
        -: 1190:    case outpost:
        -: 1191:    //set outpost flag
    #####: 1192:    state->outpostPlayed++;
        -: 1193:
        -: 1194:    //discard card
    #####: 1195:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1196:    return 0;
        -: 1197:
        -: 1198:    case salvager:
        -: 1199:    //+1 buy
    #####: 1200:    state->numBuys++;
        -: 1201:
    #####: 1202:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1203:    {
        -: 1204:      //gain coins equal to trashed card
    #####: 1205:      state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1206:      //trash card
    #####: 1207:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1208:    }
        -: 1209:
        -: 1210:    //discard card
    #####: 1211:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1212:    return 0;
        -: 1213:
        -: 1214:    case sea_hag:
    #####: 1215:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1216:      if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1217:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1218:        state->discardCount[i]++;
    #####: 1219:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1220:      }
        -: 1221:    }
    #####: 1222:    return 0;
        -: 1223:
        -: 1224:    case treasure_map:
        -: 1225:    //search hand for another treasure_map
        1: 1226:    index = -1;
        6: 1227:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1228:    {
        5: 1229:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1230:      {
    #####: 1231:        index = i;
    #####: 1232:        break;
        -: 1233:      }
        -: 1234:    }
        1: 1235:    if (index > -1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1236:    {
        -: 1237:      //trash both treasure cards
    #####: 1238:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1239:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1240:
        -: 1241:      //gain 4 Gold cards
    #####: 1242:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1243:      {
    #####: 1244:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1245:      }
        -: 1246:
        -: 1247:      //return success
    #####: 1248:      return 1;
        -: 1249:    }
        -: 1250:
        -: 1251:    //no second treasure_map found in hand
        -: 1252:    //TODO not really a failure, should probably return 0 (was -1)
        1: 1253:    return 0;
        -: 1254:  }
        -: 1255:
    #####: 1256:  return -1;
        -: 1257:}
        -: 1258:
function discardCard called 20242 returned 100% blocks executed 100%
    20242: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:
        -: 1262:  //if card is not trashed, added to Played pile
    20242: 1263:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1264:  {
        -: 1265:    //add card to played pile
    20242: 1266:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    20242: 1267:    state->playedCardCount++;
        -: 1268:  }
        -: 1269:
        -: 1270:  //set played card to -1
    20242: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:
        -: 1273:  //remove card from player's hand
    20242: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1275:  {
        -: 1276:    //reduce number of cards in hand
      299: 1277:    state->handCount[currentPlayer]--;
        -: 1278:  }
    19943: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1280:  {
        -: 1281:    //reduce number of cards in hand
       11: 1282:    state->handCount[currentPlayer]--;
        -: 1283:  }
        -: 1284:  else
        -: 1285:  {
        -: 1286:    //replace discarded card with last card in hand
    19932: 1287:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:    //set last card to -1
    19932: 1289:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:    //reduce number of cards in hand
    19932: 1291:    state->handCount[currentPlayer]--;
        -: 1292:  }
        -: 1293:
    20242: 1294:  return 0;
        -: 1295:}
        -: 1296:
function gainCard called 68927 returned 100% blocks executed 90%
    68927: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    68927: 1302:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1303:  {
       55: 1304:    return -1;
        -: 1305:  }
        -: 1306:
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    68872: 1312:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1313:  {
    #####: 1314:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:    state->deckCount[player]++;
        -: 1316:  }
    68872: 1317:  else if (toFlag == 2)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1318:  {
      352: 1319:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
      352: 1320:    state->handCount[player]++;
        -: 1321:  }
        -: 1322:  else
        -: 1323:  {
    68520: 1324:    state->discard[player][ state->discardCount[player] ] = supplyPos;
    68520: 1325:    state->discardCount[player]++;
        -: 1326:  }
        -: 1327:
        -: 1328:  //decrease number in supply pile
    68872: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:
    68872: 1331:  return 0;
        -: 1332:}
        -: 1333:
        -: 1334:// Updates generally for coins, not for a player specifically
        -: 1335:// Is ok b/c card are discarded after every turn, no need to retain by player
function updateCoins called 121906 returned 100% blocks executed 100%
   121906: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:
        -: 1340:  //reset coin count
   121906: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
   765152: 1344:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1345:  {
   643246: 1346:    if (state->hand[player][i] == copper)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1347:    {
   205649: 1348:      state->coins += 1;
        -: 1349:    }
   437597: 1350:    else if (state->hand[player][i] == silver)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1351:    {
    29335: 1352:      state->coins += 2;
        -: 1353:    }
   408262: 1354:    else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1355:    {
    17975: 1356:      state->coins += 3;
        -: 1357:    }
        -: 1358:  }
        -: 1359:
        -: 1360:  //add bonus
   121906: 1361:  state->coins += bonus;
        -: 1362:
   121906: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
